{"version":3,"sources":["src/components/Heading.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/ChangeNetwork.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/ApproveButton.tsx","src/components/FetchingButton.tsx","src/components/Meta.tsx","src/components/TokenInput.tsx","src/components/Notice.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","AmountMeta","t","useTranslation","textDark","textLight","placeholder","normal","amount","suffix","InsufficientBalanceButton","symbol","Border","border","width","backgroundColor","marginTop","ChangeNetwork","chainId","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","ErrorMessage","error","borderColor","borderWidth","padding","code","note","message","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","useStyles","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","FetchingButton","Meta","textMedium","useLinker","url","label","undefined","textDecorationLine","MaxButton","onPressMax","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Platform","OS","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Input","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","logTransaction","toString","leave","useStakingState","getTokenAllowance","tokens","updateTokens","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","xSushiTotal","xSushiBalance","add","share","Fraction","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/7.65ef25e4.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const t = useTranslation();\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : t(\"fetching\");\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useStakingState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={t(\"you-dont-have-sushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-sushi\")} />\n            <AmountMeta\n                amount={state.sushi ? formatBalance(state.sushi.balance, state.sushi.decimals) : \"\"}\n                suffix={\"SUSHI\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.sushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals, 8);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={xSushiAmount ? formatBalance(xSushiAmount, state.xSushi!.decimals, 8) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={disabled}\n            />\n            <Meta label={t(\"xsushi-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"total-xsushi\")} text={xSushiTotal} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}